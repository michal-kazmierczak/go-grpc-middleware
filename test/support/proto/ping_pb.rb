# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: test/support/proto/ping.proto

require 'google/protobuf'


descriptor_data = "\n\x1dtest/support/proto/ping.proto\x12\x07support\"0\n\x0bPingRequest\x12\r\n\x05value\x18\x01 \x01(\t\x12\x12\n\nerror_code\x18\x02 \x01(\r\"\x1d\n\x0cPingResponse\x12\r\n\x05value\x18\x01 \x01(\t2\xa7\x02\n\nPingServer\x12\x44\n\x13RequestResponsePing\x12\x14.support.PingRequest\x1a\x15.support.PingResponse\"\x00\x12\x45\n\x12\x43lientStreamerPing\x12\x14.support.PingRequest\x1a\x15.support.PingResponse\"\x00(\x01\x12\x45\n\x12ServerStreamerPing\x12\x14.support.PingRequest\x1a\x15.support.PingResponse\"\x00\x30\x01\x12\x45\n\x10\x42idiStreamerPing\x12\x14.support.PingRequest\x1a\x15.support.PingResponse\"\x00(\x01\x30\x01\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Support
  PingRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("support.PingRequest").msgclass
  PingResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("support.PingResponse").msgclass
end
